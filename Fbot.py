from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# -----------------------
# CONFIGURATION
# -----------------------
TOKEN = "8456146335:AAG30bvxx0D3xKGzesZgiOuJsJATcaf-cNI"
OWNER_ID = 7670747174
ADMINS = [OWNER_ID]

# Data storage
all_users = set()
live_support_users = {}
pending_requests = {}
user_mapping = {}
user_language = {}  # Store user language preference

# -----------------------
# /start command
# -----------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    all_users.add(user.id)

    # Default welcome text (bilingual)
    text = f"üëã Welcome / ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ to Kong's Club Help Support Bot\n\n" \
           f"üÜî Your ID / ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ü‡¶á‡¶°‡¶ø: <code>{user.id}</code>\n" \
           f"üë§ Name / ‡¶®‡¶æ‡¶Æ: {user.full_name} (@{user.username if user.username else 'No Username'})"

    # Buttons for all users
    keyboard = [
        [InlineKeyboardButton("üí¨ Live Support / ‡¶≤‡¶æ‡¶á‡¶≠ ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü", callback_data="live_support")],
        [InlineKeyboardButton("üåê Language / ‡¶≠‡¶æ‡¶∑‡¶æ", callback_data="choose_language")]
    ]

    # Admin Panel button only for admins
    if user.id in ADMINS:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è Admin Panel / ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤", callback_data="admin_panel")])

    await update.message.reply_text(text, parse_mode="HTML", reply_markup=InlineKeyboardMarkup(keyboard))

# -----------------------
# Language selection
# -----------------------
async def choose_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("English", callback_data="set_lang_en")],
        [InlineKeyboardButton("‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", callback_data="set_lang_bn")]
    ]
    await query.edit_message_text("üåê Please choose your language / ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:", reply_markup=InlineKeyboardMarkup(keyboard))

async def set_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()

    if query.data == "set_lang_en":
        user_language[user.id] = "en"
        await query.edit_message_text("‚úÖ Language set to English.")
    elif query.data == "set_lang_bn":
        user_language[user.id] = "bn"
        await query.edit_message_text("‚úÖ ‡¶≠‡¶æ‡¶∑‡¶æ ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶π‡¶ø‡¶∏‡ßá‡¶¨‡ßá ‡¶∏‡ßá‡¶ü ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§")

# -----------------------
# Live Support Button
# -----------------------
async def live_support_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()

    if user.id in live_support_users:
        msg = "‚ö†Ô∏è Already connected with an admin."
        if user_language.get(user.id) == "bn":
            msg = "‚ö†Ô∏è ‡¶Ü‡¶™‡¶®‡¶ø ‡¶á‡¶§‡¶ø‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá‡¶á ‡¶ï‡ßã‡¶®‡ßã ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§‡•§"
        await query.edit_message_text(msg)
        return

    for admin_id in ADMINS:
        try:
            keyboard = [[InlineKeyboardButton("‚úÖ Accept", callback_data=f"accept_{user.id}")]]
            await context.bot.send_message(
                admin_id,
                f"üì© New Support Request / ‡¶®‡¶§‡ßÅ‡¶® ‡¶∏‡¶æ‡¶™‡ßã‡¶∞‡ßç‡¶ü ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü\nFrom: {user.full_name} (@{user.username if user.username else 'No Username'})\nUser ID: {user.id}",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            pending_requests.setdefault(user.id, []).append(admin_id)
        except:
            pass

    msg = "‚è≥ Support request sent to admins. Wait for acceptance."
    if user_language.get(user.id) == "bn":
        msg = "‚è≥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶è‡¶°‡¶Æ‡¶ø‡¶®‡¶¶‡ßá‡¶∞ ‡¶ï‡¶æ‡¶õ‡ßá‡•§"
    await query.edit_message_text(msg)

# -----------------------
# Admin Accept Button
# -----------------------
async def accept_request(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    admin = query.from_user
    await query.answer()

    if admin.id not in ADMINS:
        await query.edit_message_text("‚ùå You are not an admin / ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®‡•§")
        return

    user_id = int(query.data.split("_")[1])
    if user_id in live_support_users:
        await query.edit_message_text("‚ö†Ô∏è Already accepted by another admin.")
        return

    live_support_users[user_id] = admin.id

    for other_admin_id in pending_requests.get(user_id, []):
        if other_admin_id != admin.id:
            try:
                await context.bot.send_message(other_admin_id, f"‚ö†Ô∏è User {user_id} accepted by {admin.full_name}.")
            except:
                pass
    pending_requests.pop(user_id, None)

    await query.edit_message_text("‚úÖ You accepted the support request.")
    try:
        lang = user_language.get(user_id, "en")
        msg = "üë®‚Äçüíª Admin connected. You can now send messages and files."
        if lang == "bn":
            msg = "üë®‚Äçüíª ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶∏‡¶Ç‡¶Ø‡ßÅ‡¶ï‡ßç‡¶§ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶ñ‡¶® ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶è‡¶¨‡¶Ç ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡¶æ‡¶†‡¶æ‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®‡•§"
        await context.bot.send_message(user_id, msg)
    except:
        pass

# -----------------------
# Forward User Messages
# -----------------------
async def forward_to_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    admin_id = live_support_users.get(user.id)

    if admin_id:
        try:
            if update.message.text:
                msg = await context.bot.send_message(admin_id, f"üì© Message from {user.full_name} (@{user.username if user.username else 'No Username'}):\n\n{update.message.text}")
                user_mapping[msg.message_id] = user.id
            elif update.message.photo:
                msg = await context.bot.send_photo(admin_id, photo=update.message.photo[-1].file_id, caption=f"üì© Photo from {user.full_name}")
                user_mapping[msg.message_id] = user.id
            elif update.message.document:
                msg = await context.bot.send_document(admin_id, document=update.message.document.file_id, caption=f"üì© Document from {user.full_name}")
                user_mapping[msg.message_id] = user.id
        except:
            pass
    else:
        lang = user_language.get(user.id, "en")
        msg = "‚è≥ Waiting for an admin to accept your request"
        if lang == "bn":
            msg = "‚è≥ ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶∞‡¶ø‡¶ï‡ßã‡ßü‡ßá‡¶∏‡ßç‡¶ü ‡¶è‡¶ñ‡¶®‡¶ì ‡¶ó‡ßç‡¶∞‡¶π‡¶£ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø"
        await update.message.reply_text(msg)

# -----------------------
# Admin reply
# -----------------------
async def admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin = update.effective_user
    if admin.id not in ADMINS:
        return

    if update.message.reply_to_message:
        replied_msg_id = update.message.reply_to_message.message_id
        target_user_id = user_mapping.get(replied_msg_id)
        if target_user_id and live_support_users.get(target_user_id) == admin.id:
            try:
                if update.message.text:
                    await context.bot.send_message(target_user_id, f"üë®‚Äçüíª Admin: {update.message.text}")
                elif update.message.photo:
                    await context.bot.send_photo(target_user_id, photo=update.message.photo[-1].file_id, caption="üë®‚Äçüíª Admin sent a photo")
                elif update.message.document:
                    await context.bot.send_document(target_user_id, document=update.message.document.file_id, caption="üë®‚Äçüíª Admin sent a document")
            except:
                pass

# -----------------------
# Admin Panel Inline
# -----------------------
async def admin_panel_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()

    if user.id not in ADMINS:
        await query.edit_message_text("‚ùå You are not an admin / ‡¶Ü‡¶™‡¶®‡¶ø ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶®‡¶®‡•§")
        return

    keyboard = [
        [InlineKeyboardButton("üì¢ Broadcast", callback_data="panel_broadcast")],
        [InlineKeyboardButton("üë• Users List", callback_data="panel_users")],
        [InlineKeyboardButton("‚ûï Add Admin", callback_data="panel_addadmin")],
        [InlineKeyboardButton("‚ûñ Remove Admin", callback_data="panel_removeadmin")]
    ]
    await query.edit_message_text("‚öôÔ∏è Admin Panel / ‡¶è‡¶°‡¶Æ‡¶ø‡¶® ‡¶™‡ßç‡¶Ø‡¶æ‡¶®‡ßá‡¶≤", reply_markup=InlineKeyboardMarkup(keyboard))

# -----------------------
# Admin Panel Actions
# -----------------------
async def admin_panel_actions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user = query.from_user
    await query.answer()

    if user.id not in ADMINS:
        return

    action = query.data
    if action == "panel_users":
        text = "üë• All Users / ‡¶∏‡¶Æ‡¶∏‡ßç‡¶§ ‡¶á‡¶â‡¶ú‡¶æ‡¶∞:\n\n" + "\n".join([str(uid) for uid in all_users])
        await query.edit_message_text(text)
    else:
        await query.edit_message_text("‚ö†Ô∏è Use commands for this action / ‡¶è‡¶á ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶® ‡¶è‡¶ñ‡¶® ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¶‡¶ø‡ßü‡ßá ‡¶ï‡¶∞‡ßÅ‡¶®‡•§")

# -----------------------
# Bot Runner
# -----------------------
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(live_support_handler, pattern="^live_support$"))
    app.add_handler(CallbackQueryHandler(choose_language, pattern="^choose_language$"))
    app.add_handler(CallbackQueryHandler(set_language, pattern="^set_lang_"))
    app.add_handler(CallbackQueryHandler(accept_request, pattern="^accept_"))
    app.add_handler(CallbackQueryHandler(admin_panel_handler, pattern="^admin_panel$"))
    app.add_handler(CallbackQueryHandler(admin_panel_actions, pattern="^panel_"))
    app.add_handler(MessageHandler(filters.ALL & ~filters.User(ADMINS), forward_to_admins))
    app.add_handler(MessageHandler(filters.ALL & filters.User(ADMINS), admin_reply))

    print("ü§ñ Live Support Bot running. Bilingual (Bangla + English) with two buttons for users.")
    app.run_polling()

if __name__ == "__main__":
    main()
